{"name":"Honeybadger","tagline":"Javascript deobfuscation tool","body":"Virtually all exploit kits today will obfuscate the Javascript they serve to evade detection and hinder analysis, making it difficult to determine exactly what a piece of malicious code is designed to do. Honeybadger provides a quick and easy interface for submitting samples and provides a detailed report on the potentially malicious actions they perform. Honeybadger aims to provide accurate results with little to no technical or programming expertise required to analyse the code.\r\n\r\n##How does Honeybadger work?\r\nMany existing Javascript analysis tools work by executing samples while allowing you to intercept and modify specific functions to return their results. This usually requires a level of programming experience to effectively use the tool and get the desired results. They can also struggle to successfully emulate a browser which can prevent malicious code from being analysed successfully. Honeybadger overcomes these problems by allowing the code to run as intended in a virtual machine, intercepting key functions and DOM changes before compiling all activity into a report. The diagram below shows how Honeybadger performs its analysis:\r\n\r\n##Setting up Honeybadger\r\n```\r\nInstall Python 2.7.X if you donâ€™t already have it\r\nDownload and set up web2py from here and run in public mode with ./web2py\r\nDownload the latest copy of Honeybadger from github and extract into the applications folder of your web2py directory.\r\nConfigure a virtual machine on a host-only adapter and navigate to http://<host ip>:8000/honeybadger and select analyse\r\nFrom the host OS navigate to http://localhost:8000/honeybadger and select submit\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}